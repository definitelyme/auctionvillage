plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.secrets_gradle_plugin' version '0.6.1'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def devStoreFile = keystoreProperties.getProperty('debug.file')
def devStorePassword = keystoreProperties.getProperty('debug.storePassword')
def devKeyAlias = keystoreProperties.getProperty('debug.alias')
def devKeyPassword = keystoreProperties.getProperty('debug.keyPassword')

def prodStoreFile = keystoreProperties.getProperty('prod.file')
def prodStorePassword = keystoreProperties.getProperty('prod.storePassword')
def prodKeyAlias = keystoreProperties.getProperty('prod.alias')
def prodKeyPassword = keystoreProperties.getProperty('prod.keyPassword')

apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    // Ignore all keys matching regex "sdk.*"
    secrets {
        propertiesFileName 'secrets.properties'
        ignoreList.add("sdk.*")
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    dexOptions {
        if (System.getenv()["CI"] != null && System.getenv()["CI"].toBoolean() == true) {
            preDexLibraries true
            maxProcessCount 8
            javaMaxHeapSize "4g"
        }
    }

    // kapt {
    //     correctErrorTypes = true
    // }

    defaultConfig {
        applicationId "com.mobile.app.auctionvillage"
        minSdkVersion 26
        targetSdkVersion 31
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            if (System.getenv()["CI"] != null && System.getenv()["CI"].toBoolean() == true) {
                storeFile = file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword = System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias = System.getenv()["CM_KEY_ALIAS"]
                keyPassword = System.getenv()["CM_KEY_PASSWORD"]
            } else {
                storeFile rootProject.file(devStoreFile)
                storePassword devStorePassword
                keyAlias devKeyAlias
                keyPassword devKeyPassword
            }
        }
        release {
            if (System.getenv()["CI"] != null && System.getenv()["CI"].toBoolean() == true) {
                storeFile = file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword = System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias = System.getenv()["CM_KEY_ALIAS"]
                keyPassword = System.getenv()["CM_KEY_PASSWORD"]
            } else {
                storeFile rootProject.file(prodStoreFile)
                storePassword prodStorePassword
                keyAlias prodKeyAlias
                keyPassword prodKeyPassword
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            crunchPngs false
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            firebaseCrashlytics {
                // If you don't need crash reporting for your debug build,
                // you can speed up your build by disabling mapping file uploading.
                mappingFileUploadEnabled false
            }
        }
        release {
            debuggable false
            crunchPngs true
            minifyEnabled true
            useProguard true
            // shrinkResources true
            signingConfig signingConfigs.release
            firebaseCrashlytics { mappingFileUploadEnabled true }
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "app"

    productFlavors {
        dev {
            dimension "app"
            versionNameSuffix "-dev"
            applicationIdSuffix ".dev"
            signingConfig signingConfigs.debug
        }
        beta {
            dimension "app"
            versionNameSuffix "-beta"
            signingConfig signingConfigs.release
        }
        prod {
            dimension "app"
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
